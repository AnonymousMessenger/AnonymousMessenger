apply plugin: 'com.android.library'
group='com.github.PanagiotisDrakatos'
android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"
//    sourceSets {
//        main {
//            jniLibs.srcDirs = ['jniLibs']
//        }
//    }
//    sourceSets {
//        debug {
//            jniLibs.srcDirs = ['lib']
//        }
//    }
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

//        ndk { abiFilters 'x86', 'x86_64', 'armeabi'}
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar','*.so'])
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
//    api 'org.slf4j:slf4j-android:1.7.30'
    api 'androidx.appcompat:appcompat:1.2.0'
    api 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.1'
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}